// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FBSDKLoginKit
import FBSDKCoreKit
import FBSDKCoreKit_Basics
@_exported import FBSDKLoginKit
import Foundation
import Swift
import UIKit
import _Concurrency
extension FBSDKCoreKit.AppEvents : FBSDKLoginKit._LoginEventLogging {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc(FBSDKLoginButton) @_Concurrency.MainActor(unsafe) final public class FBLoginButton : FBSDKCoreKit.FBButton {
  @objc @_Concurrency.MainActor(unsafe) final public var defaultAudience: FBSDKLoginKit.DefaultAudience {
    @objc get
    @objc set
  }
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak final public var delegate: FBSDKLoginKit.LoginButtonDelegate?
  @objc @_Concurrency.MainActor(unsafe) final public var permissions: [Swift.String]
  @objc @_Concurrency.MainActor(unsafe) final public var tooltipBehavior: FBSDKLoginKit.FBLoginButton.TooltipBehavior
  @objc @_Concurrency.MainActor(unsafe) final public var tooltipColorStyle: FBSDKLoginKit.FBTooltipView.ColorStyle
  @objc @_Concurrency.MainActor(unsafe) final public var loginTracking: FBSDKLoginKit.LoginTracking
  @objc @_Concurrency.MainActor(unsafe) final public var nonce: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var messengerPageId: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) final public var authType: FBSDKLoginKit.LoginAuthType?
  @objc @_Concurrency.MainActor(unsafe) final public var codeVerifier: FBSDKLoginKit.CodeVerifier
  @objc(FBSDKLoginButtonTooltipBehavior) public enum TooltipBehavior : Swift.UInt {
    case automatic = 0
    case forceDisplay
    case disable
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override final public func imageRect(forContentRect contentRect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override final public func titleRect(forContentRect contentRect: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc deinit
}
@objcMembers @objc(FBSDKPermission) final public class FBPermission : ObjectiveC.NSObject {
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc public init?(string: Swift.String)
  @objc(permissionsFromRawPermissions:) public static func permissions(fromRawPermissions rawPermissions: Swift.Set<Swift.String>) -> Swift.Set<FBSDKLoginKit.FBPermission>?
  @objc(rawPermissionsFromPermissions:) public static func rawPermissions(from permissions: Swift.Set<FBSDKLoginKit.FBPermission>) -> Swift.Set<Swift.String>
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension FBSDKCoreKit.InternalUtility : FBSDKLoginKit._UserInterfaceElementProviding {
}
extension FBSDKCoreKit.InternalUtility : FBSDKLoginKit._UserInterfaceStringProviding {
}
@objc(FBSDKLoginButtonDelegate) public protocol LoginButtonDelegate : ObjectiveC.NSObjectProtocol {
  @objc(loginButton:didCompleteWithResult:error:) func loginButton(_ loginButton: FBSDKLoginKit.FBLoginButton, didCompleteWith result: FBSDKLoginKit.LoginManagerLoginResult?, error: Swift.Error?)
  @objc func loginButtonDidLogOut(_ loginButton: FBSDKLoginKit.FBLoginButton)
  @objc optional func loginButtonWillLogin(_ loginButton: FBSDKLoginKit.FBLoginButton) -> Swift.Bool
}
@objcMembers @objc(FBSDKLoginConfiguration) final public class LoginConfiguration : ObjectiveC.NSObject {
  @objc final public let nonce: Swift.String
  @objc final public let tracking: FBSDKLoginKit.LoginTracking
  @objc final public let requestedPermissions: Swift.Set<FBSDKLoginKit.FBPermission>
  @objc final public let messengerPageId: Swift.String?
  @objc final public let authType: FBSDKLoginKit.LoginAuthType?
  @objc final public let codeVerifier: FBSDKLoginKit.CodeVerifier
  @objc(initWithPermissions:tracking:nonce:messengerPageId:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, nonce: Swift.String, messengerPageId: Swift.String?)
  @objc(initWithPermissions:tracking:nonce:messengerPageId:authType:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, nonce: Swift.String, messengerPageId: Swift.String?, authType: FBSDKLoginKit.LoginAuthType?)
  @objc(initWithPermissions:tracking:nonce:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, nonce: Swift.String)
  @objc(initWithPermissions:tracking:messengerPageId:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, messengerPageId: Swift.String?)
  @objc(initWithPermissions:tracking:messengerPageId:authType:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, messengerPageId: Swift.String?, authType: FBSDKLoginKit.LoginAuthType?)
  @objc(initWithPermissions:tracking:nonce:messengerPageId:authType:codeVerifier:) public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking, nonce: Swift.String, messengerPageId: Swift.String?, authType: FBSDKLoginKit.LoginAuthType?, codeVerifier: FBSDKLoginKit.CodeVerifier)
  @objc(initWithPermissions:tracking:) convenience public init?(permissions: [Swift.String], tracking: FBSDKLoginKit.LoginTracking)
  @objc(initWithTracking:) convenience public init?(tracking: FBSDKLoginKit.LoginTracking)
  @available(*, deprecated, message: "This method is deprecated and will be removed in the next major release.")
  @objc(authTypeForString:) public static func authType(for rawValue: Swift.String) -> FBSDKLoginKit.LoginAuthType?
  convenience public init?(permissions: Swift.Set<FBSDKCoreKit.Permission> = [], tracking: FBSDKLoginKit.LoginTracking = .enabled, nonce: Swift.String = UUID().uuidString, messengerPageId: Swift.String? = nil, authType: FBSDKLoginKit.LoginAuthType? = .rerequest, codeVerifier: FBSDKLoginKit.CodeVerifier = CodeVerifier())
  @objc deinit
}
public typealias LoginResultBlock = (FBSDKLoginKit.LoginResult) -> Swift.Void
@frozen public enum LoginResult {
  case success(granted: Swift.Set<FBSDKCoreKit.Permission>, declined: Swift.Set<FBSDKCoreKit.Permission>, token: FBSDKCoreKit.AccessToken?)
  case cancelled
  case failed(Swift.Error)
}
extension FBSDKLoginKit.LoginManager {
  convenience public init(defaultAudience: FBSDKLoginKit.DefaultAudience = .friends)
  public func logIn(permissions: [FBSDKCoreKit.Permission] = [.publicProfile], viewController: UIKit.UIViewController? = nil, completion: FBSDKLoginKit.LoginResultBlock? = nil)
  public func logIn(viewController: UIKit.UIViewController? = nil, configuration: FBSDKLoginKit.LoginConfiguration, completion: @escaping FBSDKLoginKit.LoginResultBlock)
}
@objc(FBSDKLoginTracking) public enum LoginTracking : Swift.UInt {
  case enabled
  case limited
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension FBSDKCoreKit.ServerConfigurationProvider : FBSDKLoginKit._ServerConfigurationProviding {
}
@objc(_FBSDKLoginEventLogging) public protocol _LoginEventLogging {
  @objc var flushBehavior: FBSDKCoreKit.AppEvents.FlushBehavior { get }
  @objc func logInternalEvent(_ eventName: FBSDKCoreKit.AppEvents.Name, parameters: [FBSDKCoreKit.AppEvents.ParameterName : Any]?, isImplicitlyLogged: Swift.Bool)
  @objc func flush()
}
@_inheritsConvenienceInitializers @objcMembers @objc(FBSDKLoginUtility) final public class _LoginUtility : ObjectiveC.NSObject {
  @objc public static func string(forAudience audience: FBSDKLoginKit.DefaultAudience) -> Swift.String
  @objc public static func queryParams(fromLoginURL url: Foundation.URL) -> [Swift.String : Any]?
  @objc public static func userID(fromSignedRequest signedRequest: Swift.String?) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc(_FBSDKServerConfigurationProviding) public protocol _ServerConfigurationProviding {
  @objc(loadServerConfigurationWithCompletionBlock:) func loadServerConfiguration(completion: FBSDKCoreKit.LoginTooltipBlock?)
}
@objc(_FBSDKUserInterfaceElementProviding) public protocol _UserInterfaceElementProviding {
  @objc func topMostViewController() -> UIKit.UIViewController?
  @objc(viewControllerForView:) func viewController(for view: UIKit.UIView) -> UIKit.UIViewController?
}
@objc(_FBSDKUserInterfaceStringProviding) public protocol _UserInterfaceStringProviding {
  @objc var bundleForStrings: Foundation.Bundle { get }
}
extension FBSDKLoginKit.FBLoginButton.TooltipBehavior : Swift.Equatable {}
extension FBSDKLoginKit.FBLoginButton.TooltipBehavior : Swift.Hashable {}
extension FBSDKLoginKit.FBLoginButton.TooltipBehavior : Swift.RawRepresentable {}
extension FBSDKLoginKit.LoginTracking : Swift.Equatable {}
extension FBSDKLoginKit.LoginTracking : Swift.Hashable {}
extension FBSDKLoginKit.LoginTracking : Swift.RawRepresentable {}
