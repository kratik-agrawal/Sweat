#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef FBSDKLOGINKIT_SWIFT_H
#define FBSDKLOGINKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import FBSDKCoreKit;
@import Foundation;
@import ObjectiveC;
#endif

#import <FBSDKLoginKit/FBSDKLoginKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FBSDKLoginKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSNumber;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_LoginEventLogging")
@protocol _FBSDKLoginEventLogging
@property (nonatomic, readonly) FBSDKAppEventsFlushBehavior flushBehavior;
- (void)logInternalEvent:(FBSDKAppEventName _Nonnull)eventName parameters:(NSDictionary<FBSDKAppEventParameterName, id> * _Nullable)parameters isImplicitlyLogged:(BOOL)isImplicitlyLogged;
- (void)flush;
@end


@interface FBSDKAppEvents (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKLoginEventLogging>
@end

@protocol FBSDKLoginButtonDelegate;
@class NSString;
enum FBSDKLoginButtonTooltipBehavior : NSUInteger;
enum FBSDKLoginTracking : NSUInteger;
@class FBSDKCodeVerifier;
@class NSCoder;

/// A button that initiates a log in or log out flow upon tapping.
/// <code>LoginButton</code> works with <code>AccessToken.current</code> to determine what to display,
/// and automatically starts authentication when tapped (i.e., you do not need to manually subscribe action targets).
/// Like <code>LoginManager</code>, you should make sure your app delegate is connected to <code>ApplicationDelegate</code>
/// in order for the button’s delegate to receive messages.
/// <code>LoginButton</code> has a fixed height of 30 pixels, but you may change the width.
/// Initializing the button with <code>nil</code> frame will size the button to its minimum frame.
SWIFT_CLASS_NAMED("FBLoginButton")
@interface FBSDKLoginButton : FBSDKButton
/// The default audience to use, if publish permissions are requested at login time.
@property (nonatomic) FBSDKDefaultAudience defaultAudience;
/// Gets or sets the delegate.
@property (nonatomic, weak) IBOutlet id <FBSDKLoginButtonDelegate> _Nullable delegate;
/// The permissions to request.
/// To provide the best experience, you should minimize the number of permissions you request, and only ask for them when needed.
/// For example, do not ask for “user_location” until you the information is actually used by the app.
/// Note this is converted to NSSet and is only
/// an NSArray for the convenience of literal syntax.
/// See <a href="https://developers.facebook.com/docs/facebook-login/permissions/">the permissions guide</a> for more details.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull permissions;
/// Gets or sets the desired tooltip behavior.
@property (nonatomic) enum FBSDKLoginButtonTooltipBehavior tooltipBehavior;
/// Gets or sets the desired tooltip color style.
@property (nonatomic) FBSDKTooltipColorStyle tooltipColorStyle;
/// Gets or sets the desired tracking preference to use for login attempts. Defaults to <code>.enabled</code>
@property (nonatomic) enum FBSDKLoginTracking loginTracking;
/// Gets or sets an optional nonce to use for login attempts. A valid nonce must be a non-empty string without whitespace.
/// An invalid nonce will not be set. Instead, default unique nonces will be used for login attempts.
@property (nonatomic, copy) NSString * _Nullable nonce;
/// Gets or sets an optional page id to use for login attempts.
@property (nonatomic, copy) NSString * _Nullable messengerPageId;
/// Gets or sets the auth_type to use in the login request. Defaults to <code>rerequest</code>.
@property (nonatomic) FBSDKLoginAuthType _Nullable authType;
/// The code verifier used in the PKCE process.
/// If not provided, a code verifier will be randomly generated.
@property (nonatomic, strong) FBSDKCodeVerifier * _Nonnull codeVerifier;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
- (CGRect)imageRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (CGRect)titleRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

/// Indicates the desired login tooltip behavior.
typedef SWIFT_ENUM_NAMED(NSUInteger, FBSDKLoginButtonTooltipBehavior, "TooltipBehavior", open) {
/// The default behavior. The tooltip will only be displayed if
/// the app is eligible (determined by possible server round trip)
  FBSDKLoginButtonTooltipBehaviorAutomatic = 0,
/// Force display of the tooltip (typically for UI testing)
  FBSDKLoginButtonTooltipBehaviorForceDisplay = 1,
/// Force disable. In this case you can still exert more refined
/// control by manually constructing a <code>FBSDKLoginTooltipView</code> instance.
  FBSDKLoginButtonTooltipBehaviorDisable = 2,
};


/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// <ul>
///   <li>
///     Warning INTERNAL:  DO NOT USE
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("FBPermission")
@interface FBSDKPermission : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
/// Attempts to initialize a new permission with the given string.
/// Creation will fail and return nil if the string is invalid.
/// \param string The raw permission string
///
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
/// Returns a set of <code>FBPermission</code> from a set of raw permissions strings.
/// Will return nil if any of the input permissions is invalid.
+ (NSSet<FBSDKPermission *> * _Nullable)permissionsFromRawPermissions:(NSSet<NSString *> * _Nonnull)rawPermissions SWIFT_WARN_UNUSED_RESULT;
/// Returns a set of string permissions from a set of <code>FBPermission</code> by
/// extracting the “value” property for each element.
+ (NSSet<NSString *> * _Nonnull)rawPermissionsFromPermissions:(NSSet<FBSDKPermission *> * _Nonnull)permissions SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;
@class UIView;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_UserInterfaceElementProviding")
@protocol _FBSDKUserInterfaceElementProviding
- (UIViewController * _Nullable)topMostViewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)viewControllerForView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKInternalUtility (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKUserInterfaceElementProviding>
@end

@class NSBundle;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_UserInterfaceStringProviding")
@protocol _FBSDKUserInterfaceStringProviding
@property (nonatomic, readonly, strong) NSBundle * _Nonnull bundleForStrings;
@end


@interface FBSDKInternalUtility (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKUserInterfaceStringProviding>
@end

@class FBSDKLoginManagerLoginResult;

/// A delegate for <code>FBSDKLoginButton</code>
SWIFT_PROTOCOL_NAMED("LoginButtonDelegate")
@protocol FBSDKLoginButtonDelegate <NSObject>
/// Sent to the delegate when the button was used to login.
/// @param loginButton The button being used to log in
/// @param result The results of the login
/// @param error The error (if any) from the login
- (void)loginButton:(FBSDKLoginButton * _Nonnull)loginButton didCompleteWithResult:(FBSDKLoginManagerLoginResult * _Nullable)result error:(NSError * _Nullable)error;
/// Sent to the delegate when the button was used to logout.
/// @param loginButton The button being used to log out.
- (void)loginButtonDidLogOut:(FBSDKLoginButton * _Nonnull)loginButton;
@optional
/// Sent to the delegate when the button is about to login.
/// @param loginButton The button being used to log in
/// @return <code>true</code> if the login should be allowed to proceed, <code>false</code> otherwise
- (BOOL)loginButtonWillLogin:(FBSDKLoginButton * _Nonnull)loginButton SWIFT_WARN_UNUSED_RESULT;
@end


/// A configuration to use for modifying the behavior of a login attempt.
SWIFT_CLASS_NAMED("LoginConfiguration")
@interface FBSDKLoginConfiguration : NSObject
/// The nonce that the configuration was created with.
/// A unique nonce will be used if none is provided to the initializer.
@property (nonatomic, readonly, copy) NSString * _Nonnull nonce;
/// The tracking  preference. Defaults to <code>.enabled</code>.
@property (nonatomic, readonly) enum FBSDKLoginTracking tracking;
/// The requested permissions for the login attempt. Defaults to an empty set.
@property (nonatomic, readonly, copy) NSSet<FBSDKPermission *> * _Nonnull requestedPermissions;
/// The Messenger Page Id associated with this login request.
@property (nonatomic, readonly, copy) NSString * _Nullable messengerPageId;
/// The auth type associated with this login request.
@property (nonatomic, readonly) FBSDKLoginAuthType _Nullable authType;
/// The code verifier used in the PKCE process.
/// If not provided, a code verifier will be randomly generated.
@property (nonatomic, readonly, strong) FBSDKCodeVerifier * _Nonnull codeVerifier;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param messengerPageId the associated page id  to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking messengerPageId:(NSString * _Nullable)messengerPageId;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
/// @param codeVerifier The code verifier used in the PKCE process.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType codeVerifier:(FBSDKCodeVerifier * _Nonnull)codeVerifier OBJC_DESIGNATED_INITIALIZER;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param tracking the login tracking preference to use for a login attempt.
- (nullable instancetype)initWithTracking:(enum FBSDKLoginTracking)tracking;
/// Given a string, return the corresponding FBSDKLoginAuthType. Returns nil if the string cannot be mapped to a valid auth type
/// @param rawValue the raw auth type.
+ (FBSDKLoginAuthType _Nullable)authTypeForString:(NSString * _Nonnull)rawValue SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method is deprecated and will be removed in the next major release.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>enabled</code> and <code>limited</code> see: https://developers.facebook.com/docs/facebook-login/ios/limited-login/
typedef SWIFT_ENUM_NAMED(NSUInteger, FBSDKLoginTracking, "LoginTracking", open) {
  FBSDKLoginTrackingEnabled = 0,
  FBSDKLoginTrackingLimited = 1,
};


/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_ServerConfigurationProviding")
@protocol _FBSDKServerConfigurationProviding
- (void)loadServerConfigurationWithCompletionBlock:(FBSDKLoginTooltipBlock _Nullable)completion;
@end


@interface FBSDKServerConfigurationProvider (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKServerConfigurationProviding>
@end


@class NSURL;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_CLASS_NAMED("_LoginUtility")
@interface FBSDKLoginUtility : NSObject
+ (NSString * _Nonnull)stringForAudience:(FBSDKDefaultAudience)audience SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nullable)queryParamsFromLoginURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)userIDFromSignedRequest:(NSString * _Nullable)signedRequest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef FBSDKLOGINKIT_SWIFT_H
#define FBSDKLOGINKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import FBSDKCoreKit;
@import Foundation;
@import ObjectiveC;
#endif

#import <FBSDKLoginKit/FBSDKLoginKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FBSDKLoginKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSNumber;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_LoginEventLogging")
@protocol _FBSDKLoginEventLogging
@property (nonatomic, readonly) FBSDKAppEventsFlushBehavior flushBehavior;
- (void)logInternalEvent:(FBSDKAppEventName _Nonnull)eventName parameters:(NSDictionary<FBSDKAppEventParameterName, id> * _Nullable)parameters isImplicitlyLogged:(BOOL)isImplicitlyLogged;
- (void)flush;
@end


@interface FBSDKAppEvents (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKLoginEventLogging>
@end

@protocol FBSDKLoginButtonDelegate;
@class NSString;
enum FBSDKLoginButtonTooltipBehavior : NSUInteger;
enum FBSDKLoginTracking : NSUInteger;
@class FBSDKCodeVerifier;
@class NSCoder;

/// A button that initiates a log in or log out flow upon tapping.
/// <code>LoginButton</code> works with <code>AccessToken.current</code> to determine what to display,
/// and automatically starts authentication when tapped (i.e., you do not need to manually subscribe action targets).
/// Like <code>LoginManager</code>, you should make sure your app delegate is connected to <code>ApplicationDelegate</code>
/// in order for the button’s delegate to receive messages.
/// <code>LoginButton</code> has a fixed height of 30 pixels, but you may change the width.
/// Initializing the button with <code>nil</code> frame will size the button to its minimum frame.
SWIFT_CLASS_NAMED("FBLoginButton")
@interface FBSDKLoginButton : FBSDKButton
/// The default audience to use, if publish permissions are requested at login time.
@property (nonatomic) FBSDKDefaultAudience defaultAudience;
/// Gets or sets the delegate.
@property (nonatomic, weak) IBOutlet id <FBSDKLoginButtonDelegate> _Nullable delegate;
/// The permissions to request.
/// To provide the best experience, you should minimize the number of permissions you request, and only ask for them when needed.
/// For example, do not ask for “user_location” until you the information is actually used by the app.
/// Note this is converted to NSSet and is only
/// an NSArray for the convenience of literal syntax.
/// See <a href="https://developers.facebook.com/docs/facebook-login/permissions/">the permissions guide</a> for more details.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull permissions;
/// Gets or sets the desired tooltip behavior.
@property (nonatomic) enum FBSDKLoginButtonTooltipBehavior tooltipBehavior;
/// Gets or sets the desired tooltip color style.
@property (nonatomic) FBSDKTooltipColorStyle tooltipColorStyle;
/// Gets or sets the desired tracking preference to use for login attempts. Defaults to <code>.enabled</code>
@property (nonatomic) enum FBSDKLoginTracking loginTracking;
/// Gets or sets an optional nonce to use for login attempts. A valid nonce must be a non-empty string without whitespace.
/// An invalid nonce will not be set. Instead, default unique nonces will be used for login attempts.
@property (nonatomic, copy) NSString * _Nullable nonce;
/// Gets or sets an optional page id to use for login attempts.
@property (nonatomic, copy) NSString * _Nullable messengerPageId;
/// Gets or sets the auth_type to use in the login request. Defaults to <code>rerequest</code>.
@property (nonatomic) FBSDKLoginAuthType _Nullable authType;
/// The code verifier used in the PKCE process.
/// If not provided, a code verifier will be randomly generated.
@property (nonatomic, strong) FBSDKCodeVerifier * _Nonnull codeVerifier;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
- (CGRect)imageRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (CGRect)titleRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

/// Indicates the desired login tooltip behavior.
typedef SWIFT_ENUM_NAMED(NSUInteger, FBSDKLoginButtonTooltipBehavior, "TooltipBehavior", open) {
/// The default behavior. The tooltip will only be displayed if
/// the app is eligible (determined by possible server round trip)
  FBSDKLoginButtonTooltipBehaviorAutomatic = 0,
/// Force display of the tooltip (typically for UI testing)
  FBSDKLoginButtonTooltipBehaviorForceDisplay = 1,
/// Force disable. In this case you can still exert more refined
/// control by manually constructing a <code>FBSDKLoginTooltipView</code> instance.
  FBSDKLoginButtonTooltipBehaviorDisable = 2,
};


/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// <ul>
///   <li>
///     Warning INTERNAL:  DO NOT USE
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("FBPermission")
@interface FBSDKPermission : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
/// Attempts to initialize a new permission with the given string.
/// Creation will fail and return nil if the string is invalid.
/// \param string The raw permission string
///
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
/// Returns a set of <code>FBPermission</code> from a set of raw permissions strings.
/// Will return nil if any of the input permissions is invalid.
+ (NSSet<FBSDKPermission *> * _Nullable)permissionsFromRawPermissions:(NSSet<NSString *> * _Nonnull)rawPermissions SWIFT_WARN_UNUSED_RESULT;
/// Returns a set of string permissions from a set of <code>FBPermission</code> by
/// extracting the “value” property for each element.
+ (NSSet<NSString *> * _Nonnull)rawPermissionsFromPermissions:(NSSet<FBSDKPermission *> * _Nonnull)permissions SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;
@class UIView;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_UserInterfaceElementProviding")
@protocol _FBSDKUserInterfaceElementProviding
- (UIViewController * _Nullable)topMostViewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)viewControllerForView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@end


@interface FBSDKInternalUtility (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKUserInterfaceElementProviding>
@end

@class NSBundle;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_UserInterfaceStringProviding")
@protocol _FBSDKUserInterfaceStringProviding
@property (nonatomic, readonly, strong) NSBundle * _Nonnull bundleForStrings;
@end


@interface FBSDKInternalUtility (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKUserInterfaceStringProviding>
@end

@class FBSDKLoginManagerLoginResult;

/// A delegate for <code>FBSDKLoginButton</code>
SWIFT_PROTOCOL_NAMED("LoginButtonDelegate")
@protocol FBSDKLoginButtonDelegate <NSObject>
/// Sent to the delegate when the button was used to login.
/// @param loginButton The button being used to log in
/// @param result The results of the login
/// @param error The error (if any) from the login
- (void)loginButton:(FBSDKLoginButton * _Nonnull)loginButton didCompleteWithResult:(FBSDKLoginManagerLoginResult * _Nullable)result error:(NSError * _Nullable)error;
/// Sent to the delegate when the button was used to logout.
/// @param loginButton The button being used to log out.
- (void)loginButtonDidLogOut:(FBSDKLoginButton * _Nonnull)loginButton;
@optional
/// Sent to the delegate when the button is about to login.
/// @param loginButton The button being used to log in
/// @return <code>true</code> if the login should be allowed to proceed, <code>false</code> otherwise
- (BOOL)loginButtonWillLogin:(FBSDKLoginButton * _Nonnull)loginButton SWIFT_WARN_UNUSED_RESULT;
@end


/// A configuration to use for modifying the behavior of a login attempt.
SWIFT_CLASS_NAMED("LoginConfiguration")
@interface FBSDKLoginConfiguration : NSObject
/// The nonce that the configuration was created with.
/// A unique nonce will be used if none is provided to the initializer.
@property (nonatomic, readonly, copy) NSString * _Nonnull nonce;
/// The tracking  preference. Defaults to <code>.enabled</code>.
@property (nonatomic, readonly) enum FBSDKLoginTracking tracking;
/// The requested permissions for the login attempt. Defaults to an empty set.
@property (nonatomic, readonly, copy) NSSet<FBSDKPermission *> * _Nonnull requestedPermissions;
/// The Messenger Page Id associated with this login request.
@property (nonatomic, readonly, copy) NSString * _Nullable messengerPageId;
/// The auth type associated with this login request.
@property (nonatomic, readonly) FBSDKLoginAuthType _Nullable authType;
/// The code verifier used in the PKCE process.
/// If not provided, a code verifier will be randomly generated.
@property (nonatomic, readonly, strong) FBSDKCodeVerifier * _Nonnull codeVerifier;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param messengerPageId the associated page id  to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking messengerPageId:(NSString * _Nullable)messengerPageId;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for a login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
/// @param nonce an optional nonce to use for the login attempt. A valid nonce must be a non-empty string without whitespace.
/// Creation of the configuration will fail if the nonce is invalid.
/// @param messengerPageId the associated page id  to use for a login attempt.
/// @param authType auth_type param to use for login.
/// @param codeVerifier The code verifier used in the PKCE process.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking nonce:(NSString * _Nonnull)nonce messengerPageId:(NSString * _Nullable)messengerPageId authType:(FBSDKLoginAuthType _Nullable)authType codeVerifier:(FBSDKCodeVerifier * _Nonnull)codeVerifier OBJC_DESIGNATED_INITIALIZER;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param permissions the requested permissions for the login attempt. Permissions must be an array of strings that do not contain whitespace.
/// @param tracking the tracking preference to use for a login attempt.
- (nullable instancetype)initWithPermissions:(NSArray<NSString *> * _Nonnull)permissions tracking:(enum FBSDKLoginTracking)tracking;
/// Attempts to initialize a new configuration with the expected parameters.
/// @param tracking the login tracking preference to use for a login attempt.
- (nullable instancetype)initWithTracking:(enum FBSDKLoginTracking)tracking;
/// Given a string, return the corresponding FBSDKLoginAuthType. Returns nil if the string cannot be mapped to a valid auth type
/// @param rawValue the raw auth type.
+ (FBSDKLoginAuthType _Nullable)authTypeForString:(NSString * _Nonnull)rawValue SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This method is deprecated and will be removed in the next major release.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>enabled</code> and <code>limited</code> see: https://developers.facebook.com/docs/facebook-login/ios/limited-login/
typedef SWIFT_ENUM_NAMED(NSUInteger, FBSDKLoginTracking, "LoginTracking", open) {
  FBSDKLoginTrackingEnabled = 0,
  FBSDKLoginTrackingLimited = 1,
};


/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_PROTOCOL_NAMED("_ServerConfigurationProviding")
@protocol _FBSDKServerConfigurationProviding
- (void)loadServerConfigurationWithCompletionBlock:(FBSDKLoginTooltipBlock _Nullable)completion;
@end


@interface FBSDKServerConfigurationProvider (SWIFT_EXTENSION(FBSDKLoginKit)) <_FBSDKServerConfigurationProviding>
@end


@class NSURL;

/// Internal Type exposed to facilitate transition to Swift.
/// API Subject to change or removal without warning. Do not use.
/// @warning INTERNAL - DO NOT USE
SWIFT_CLASS_NAMED("_LoginUtility")
@interface FBSDKLoginUtility : NSObject
+ (NSString * _Nonnull)stringForAudience:(FBSDKDefaultAudience)audience SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, id> * _Nullable)queryParamsFromLoginURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)userIDFromSignedRequest:(NSString * _Nullable)signedRequest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
